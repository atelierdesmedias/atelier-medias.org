/**
 * @name: AppView.tsx
 * @description:
 */
import React from "react";
import {ReactView} from "../../../_common/core/ReactView";
import "./AppView.scss";
import { BrowserRouter, Switch, Route } from "react-router-dom";
// import MainMenu from "../mainMenu/MainMenu";
import NotFoundPage from "../../pages/notFoundPage/NotFoundPage";
import ContactPage from "../../pages/contactPage/ContactPage";
import HomePage from "../../pages/homePage/HomePage";
import {GlobalConfig} from "../../../_common/data/GlobalConfig";

// -----------------------------------------------------------------------------  STRUCT

export interface Props
{

}

export interface States
{

}

// -----------------------------------------------------------------------------  EXPORT CLASS

export default class AppView extends ReactView<Props, States>
{

    // ------------------------------------------------------------------------- INIT

    prepare ()
    {
        // Init state here, you can set from props
        this.initState({
            // ...
        });
    }

    // ------------------------------------------------------------------------- RENDER

    render()
    {
        return (
            <div className="AppView" ref="root">
               <BrowserRouter>
                   <div className="AppView_router">
                       <MainMenu className="AppView_mainMenu" />
                       <Switch>
                           <Route
                               path={ GlobalConfig.instance.base }
                               component={ HomePage }
                               exact
                           />
                           <Route
                               path={`${GlobalConfig.instance.base }contact`}
                               component={ ContactPage }
                           />
                           {/* Not Found: if no route match */}
                           {/*<Route*/}
                               {/*component={ NotFoundPage }*/}
                           {/*/>*/}
                       </Switch>
                   </div>
               </BrowserRouter>
            </div>
        )
    }

    // ------------------------------------------------------------------------- LIFECYCLE

    /**
     * When component is mounted
     */
    componentDidMount ()
    {

    }

    /**
     * Before component will unmount
     */
    componentWillUnmount ()
    {

    }

    /**
     * If component is updated
     * @param {Props} pPrevProps
     * @param {States} pPrevState
     */
    componentDidUpdate (pPrevProps:Props, pPrevState:States)
    {

    }

    // -------------------------------------------------------------------------  HANDLERS

    // -------------------------------------------------------------------------  CONFIG

}


// -----------------------------------------------------------------------------  EXPORT CLASS